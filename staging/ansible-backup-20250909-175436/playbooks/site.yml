---
# Main site playbook - deploys complete staging environment
- name: Deploy Staging Environment
  hosts: staging
  become: true
  gather_facts: true
  
  pre_tasks:
    - name: Gather OS facts
      setup:
        gather_subset: min
    
    - name: Create www-data group (Arch Linux)
      group:
        name: www-data
        state: present
      when: ansible_os_family == "Archlinux"
    
    - name: Create docker group (if not exists)
      group:
        name: docker
        state: present
    
    - name: Ensure deployment user exists
      user:
        name: "{{ ansible_user }}"
        shell: /bin/bash
        create_home: true
      when: ansible_user != "root"
    
    - name: Add user to groups (Arch Linux)
      user:
        name: "{{ ansible_user }}"
        groups: wheel,docker,www-data
        append: true
      when: ansible_user != "root" and ansible_os_family == "Archlinux"
    
    - name: Add user to groups (Debian/Ubuntu)
      user:
        name: "{{ ansible_user }}"
        groups: sudo,docker,www-data
        append: true
      when: ansible_user != "root" and ansible_os_family == "Debian"
    
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - "{{ shared_data_path }}"
        - /opt/projects
        - /opt/backups
        - /var/log/applications

  roles:
    - role: common
      tags: ['common', 'system']
    - role: security
      tags: ['security', 'firewall']
    - role: nginx-proxy
      tags: ['nginx', 'proxy']
    - role: shared-monitoring
      tags: ['monitoring', 'shared']
      when: shared_services_enabled | default(true)

  tasks:
    - name: Deploy projects
      include_tasks: project-deploy.yml
      vars:
        project: "{{ item }}"
      loop: "{{ projects }}"
      tags: ['projects', 'deploy']

  post_tasks:
    - name: Start and enable all services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: true
        daemon_reload: true
      loop:
        - nginx
        - prometheus
        - grafana-server
        - loki
        - node_exporter
        - promtail
      ignore_errors: true
      tags: ['services']
    
    - name: Verify service status
      systemd:
        name: "{{ item }}"
      register: service_status
      loop:
        - nginx
        - prometheus
        - grafana-server
        - loki
      tags: ['verify']
    
    - name: Display service status
      debug:
        msg: "{{ item.name }} is {{ item.status.ActiveState }}"
      loop: "{{ service_status.results }}"
      tags: ['verify']