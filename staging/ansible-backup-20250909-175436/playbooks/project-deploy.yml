---
# Docker-based project deployment
- name: "Deploy {{ project.name }} project with Docker"
  block:
    - name: "Create project directories for {{ project.name }}"
      file:
        path: "{{ project_defaults.project_root }}/{{ project.name }}/{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: docker
      loop:
        - config
        - data/postgresql
        - data/redis
        - logs
        - backups
        - ssl

    - name: "Clone {{ project.name }} repository"
      git:
        repo: "{{ project.git_repo }}"
        dest: "{{ project_defaults.project_root }}/{{ project.name }}/app"
        version: "{{ project.git_branch | default('main') }}"
        force: true
      become_user: "{{ ansible_user }}"

    - name: "Create environment file for {{ project.name }}"
      template:
        src: project.env.j2
        dest: "{{ project_defaults.project_root }}/{{ project.name }}/config/.env"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: docker
      vars:
        project_name: "{{ project.name }}"
        project_config: "{{ project }}"

    - name: "Create Dockerfile for {{ project.name }}"
      template:
        src: Dockerfile.j2
        dest: "{{ project_defaults.project_root }}/{{ project.name }}/app/Dockerfile"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      vars:
        project_name: "{{ project.name }}"

    - name: "Create project docker-compose file for {{ project.name }}"
      template:
        src: docker-compose-project.yml.j2
        dest: "{{ project_defaults.project_root }}/{{ project.name }}/docker-compose.yml"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      vars:
        project_name: "{{ project.name }}"
        project_config: "{{ project }}"

    - name: "Create Nginx configuration for {{ project.name }}"
      template:
        src: nginx-project.conf.j2
        dest: "{{ project_defaults.project_root }}/{{ project.name }}/config/nginx.conf"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      vars:
        project_name: "{{ project.name }}"
        project_config: "{{ project }}"

    - name: "Build {{ project.name }} Docker image"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose build
      become_user: "{{ ansible_user }}"

    - name: "Start {{ project.name }} services"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose up -d
      become_user: "{{ ansible_user }}"

    - name: "Wait for {{ project.name }} database to be ready"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose exec -T postgres pg_isready -U {{ project_defaults.db_user | regex_replace('project_name', project.name) }}
      become_user: "{{ ansible_user }}"
      retries: 30
      delay: 2

    - name: "Run Django migrations for {{ project.name }}"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose exec -T web python manage.py migrate
      become_user: "{{ ansible_user }}"

    - name: "Collect static files for {{ project.name }}"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose exec -T web python manage.py collectstatic --noinput
      become_user: "{{ ansible_user }}"

    - name: "Build CSS for {{ project.name }}"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose exec -T web make build-css
      become_user: "{{ ansible_user }}"

    - name: "Generate SSL certificate for {{ project.name }}"
      shell: |
        certbot certonly --webroot -w {{ project_defaults.project_root }}/{{ project.name }}/ssl -d {{ project.domain }} --non-interactive --agree-tos --email {{ ssl_email }} {{ '--staging' if ssl_staging else '' }}
      args:
        creates: "/etc/letsencrypt/live/{{ project.domain }}/cert.pem"

    - name: "Reload project services for {{ project.name }}"
      shell: |
        cd {{ project_defaults.project_root }}/{{ project.name }}
        docker-compose restart nginx
      become_user: "{{ ansible_user }}"