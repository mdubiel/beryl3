---
# Docker-based shared monitoring services using community.docker modules
- name: Install Docker (Arch Linux)
  pacman:
    name:
      - docker
      - docker-compose
    state: present
  when: ansible_os_family == "Archlinux"

- name: Install Docker (Debian/Ubuntu)
  apt:
    name:
      - docker.io
      - docker-compose
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: true

- name: Add deploy user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: Create monitoring directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: docker
  loop:
    - "{{ shared_data_path }}"
    - "{{ shared_data_path }}/prometheus/data"
    - "{{ shared_data_path }}/prometheus/config"
    - "{{ shared_data_path }}/grafana/data"
    - "{{ shared_data_path }}/grafana/config"
    - "{{ shared_data_path }}/loki/data"
    - "{{ shared_data_path }}/loki/config"
    - "{{ shared_data_path }}/alertmanager/data"
    - "{{ shared_data_path }}/alertmanager/config"
    - "{{ shared_data_path }}/nginx/config"
    - "{{ shared_data_path }}/promtail/config"

- name: Generate Prometheus configuration
  template:
    src: prometheus.yml.j2
    dest: "{{ shared_data_path }}/prometheus/config/prometheus.yml"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: docker

- name: Generate Loki configuration
  template:
    src: loki.yml.j2
    dest: "{{ shared_data_path }}/loki/config/loki.yml"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: docker

- name: Generate Promtail configuration
  template:
    src: promtail.yml.j2
    dest: "{{ shared_data_path }}/promtail/config/promtail.yml"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: docker

- name: Generate Grafana configuration
  template:
    src: grafana.ini.j2
    dest: "{{ shared_data_path }}/grafana/config/grafana.ini"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: docker

- name: Generate AlertManager configuration
  template:
    src: alertmanager.yml.j2
    dest: "{{ shared_data_path }}/alertmanager/config/alertmanager.yml"
    mode: '0644'
    owner: "{{ ansible_user }}"
    group: docker

- name: Create Docker networks
  community.docker.docker_network:
    name: "{{ item }}"
    state: present
  loop:
    - monitoring
    - projects

- name: Pull monitoring Docker images
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
    state: present
  loop:
    - nginx:alpine
    - prom/prometheus:latest
    - grafana/grafana:latest
    - grafana/loki:latest
    - prom/alertmanager:latest
    - prom/node-exporter:latest
    - gcr.io/cadvisor/cadvisor:latest
    - grafana/promtail:latest

- name: Start nginx-proxy container
  community.docker.docker_container:
    name: nginx-proxy
    image: nginx:alpine
    state: started
    restart_policy: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "{{ shared_data_path }}/nginx/config:/etc/nginx/conf.d:ro"
      - "{{ shared_data_path }}/nginx/ssl:/etc/nginx/ssl:ro"
    networks:
      - name: monitoring
      - name: projects

- name: Start Prometheus container
  community.docker.docker_container:
    name: prometheus
    image: prom/prometheus:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.prometheus.port }}:9090"
    volumes:
      - "{{ shared_data_path }}/prometheus/config:/etc/prometheus:ro"
      - "{{ shared_data_path }}/prometheus/data:/prometheus"
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --storage.tsdb.retention.time={{ shared_services.prometheus.retention_time }}
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --web.enable-lifecycle
      --web.enable-admin-api
    networks:
      - name: monitoring

- name: Start Grafana container
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.grafana.port }}:3000"
    volumes:
      - "{{ shared_data_path }}/grafana/data:/var/lib/grafana"
      - "{{ shared_data_path }}/grafana/config/grafana.ini:/etc/grafana/grafana.ini:ro"
    env:
      GF_SECURITY_ADMIN_USER: "{{ shared_services.grafana.admin_user }}"
      GF_SECURITY_ADMIN_PASSWORD: "{{ shared_services.grafana.admin_password }}"
    networks:
      - name: monitoring

- name: Start Loki container
  community.docker.docker_container:
    name: loki
    image: grafana/loki:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.loki.port }}:3100"
    volumes:
      - "{{ shared_data_path }}/loki/config:/etc/loki:ro"
      - "{{ shared_data_path }}/loki/data:/tmp/loki"
    command: -config.file=/etc/loki/loki.yml
    networks:
      - name: monitoring

- name: Start AlertManager container
  community.docker.docker_container:
    name: alertmanager
    image: prom/alertmanager:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.alertmanager.port }}:9093"
    volumes:
      - "{{ shared_data_path }}/alertmanager/config:/etc/alertmanager:ro"
      - "{{ shared_data_path }}/alertmanager/data:/alertmanager"
    networks:
      - name: monitoring

- name: Start Node Exporter container
  community.docker.docker_container:
    name: node-exporter
    image: prom/node-exporter:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.node_exporter.port }}:9100"
    command: >
      --path.procfs=/host/proc
      --path.sysfs=/host/sys
      --path.rootfs=/host
      --collector.filesystem.mount-points-exclude='^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/host:ro"
    networks:
      - name: monitoring

- name: Start cAdvisor container
  community.docker.docker_container:
    name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    networks:
      - name: monitoring

- name: Start Promtail container
  community.docker.docker_container:
    name: promtail
    image: grafana/promtail:latest
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ shared_services.promtail.port }}:9080"
    volumes:
      - "{{ shared_data_path }}/promtail/config:/etc/promtail:ro"
      - "/var/log:/var/log:ro"
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - name: monitoring