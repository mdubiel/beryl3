version: '3.8'

networks:
  beryl3_staging:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    external: true

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: beryl3_staging_postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: beryl3_staging_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django Web Application
  webapp:
    build: 
      context: webapp
      dockerfile: Dockerfile
    container_name: beryl3_staging_webapp
    environment:
      # Core Django
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # Database
      DB_ENGINE: django.db.backends.postgresql
      PG_DB: ${PG_DB}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_HOST: postgres
      PG_PORT: 5432
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Email (Resend)
      USE_INBUCKET: False
      EMAIL_HOST: smtp.resend.com
      EMAIL_PORT: 587
      EMAIL_USE_TLS: True
      EMAIL_HOST_USER: resend
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      
      # Google Cloud Storage
      USE_GCS_STORAGE: True
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      GCS_PROJECT_ID: ${GCS_PROJECT_ID}
      GCS_LOCATION: media
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcs-key.json
      
      # Post Office Email Queue
      POST_OFFICE_BATCH_SIZE: 50
      POST_OFFICE_BATCH_TIMEOUT: 300
      POST_OFFICE_MAX_RETRIES: 3
      POST_OFFICE_RETRY_INTERVAL: 15
      POST_OFFICE_MESSAGE_ID_FQDN: ${DOMAIN_NAME}
      
      # Application Features
      APPLICATION_ACTIVITY_LOGGING: True
      
      # Log Forwarding
      LOKI_ENABLED: True
      LOKI_URL: http://loki:3100
      
      # External Service URLs
      EXTERNAL_DB_URL: ""
      EXTERNAL_INBUCKET_URL: ""
      EXTERNAL_MONITORING_URL: ""
      EXTERNAL_SENTRY_URL: ""
      EXTERNAL_LOKI_URL: http://loki:3100
      EXTERNAL_GRAFANA_URL: http://grafana:3000
      
      # Environment
      SENTRY_ENVIRONMENT: staging
      
    volumes:
      - ./gcs_keys/mateusz-344213-5c136b4db5c3.json:/app/gcs-key.json:ro
      - webapp_staging_media:/app/media  # Fallback for local files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      loki:
        condition: service_started
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.20
      monitoring:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Frontend Proxy
  nginx:
    image: nginx:alpine
    container_name: beryl3_staging_nginx
    ports:
      - "80:80"
      - "443:443"
      - "${GRAFANA_EXTERNAL_PORT:-3000}:3001"  # Expose Grafana externally
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_staging_cache:/var/cache/nginx
    depends_on:
      - webapp
      - grafana
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.30

  # Log Collection - Loki
  loki:
    image: grafana/loki:latest
    container_name: beryl3_staging_loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_staging_data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Visualization - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: beryl3_staging_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://${DOMAIN_NAME}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_INSTALL_PLUGINS: ""
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.41
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Email Queue Worker (Post Office)
  email_worker:
    build: 
      context: webapp
      dockerfile: Dockerfile
    container_name: beryl3_staging_email_worker
    command: ["python", "manage.py", "send_queued_mail", "--processes", "2"]
    environment:
      # Same environment as webapp
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      
      # Database
      DB_ENGINE: django.db.backends.postgresql
      PG_DB: ${PG_DB}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_HOST: postgres
      PG_PORT: 5432
      
      # Email (Resend)
      USE_INBUCKET: False
      EMAIL_HOST: smtp.resend.com
      EMAIL_PORT: 587
      EMAIL_USE_TLS: True
      EMAIL_HOST_USER: resend
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      
      # Post Office
      POST_OFFICE_BATCH_SIZE: 50
      POST_OFFICE_BATCH_TIMEOUT: 300
      POST_OFFICE_MAX_RETRIES: 3
      POST_OFFICE_RETRY_INTERVAL: 15
      
    volumes:
      - ./gcs_keys/mateusz-344213-5c136b4db5c3.json:/app/gcs-key.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      beryl3_staging:
        ipv4_address: 172.20.0.21

volumes:
  postgres_staging_data:
  redis_staging_data:
  loki_staging_data:
  grafana_staging_data:
  webapp_staging_media:
  nginx_staging_cache: