---
# =====================================
# SSL Certificate Setup with Let's Encrypt
# =====================================
# This playbook sets up SSL certificates for all services using Let's Encrypt
# Since the staging environment is in a local network, DNS challenges are used

- name: Setup SSL Certificates with Let's Encrypt
  hosts: staging
  become: yes
  vars:
    ssl_base_path: /opt/ssl
    acme_challenge_path: /opt/ssl/acme-challenges
    domains:
      - beryl3.staging.mdubiel.org
      - grafana.staging.mdubiel.org
      - prometheus.staging.mdubiel.org
      - registry.staging.mdubiel.org
    letsencrypt_email: mdubiel@gmail.com
    
  pre_tasks:
    - name: Install required packages for Let's Encrypt
      package:
        name:
          - certbot
          - python3-certbot-dns-cloudflare  # If using Cloudflare DNS
        state: present
    
    - name: Create SSL directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: docker
      loop:
        - "{{ ssl_base_path }}"
        - "{{ acme_challenge_path }}"
        - "{{ ssl_base_path }}/live"
        - "{{ ssl_base_path }}/renewal"
        - "{{ ssl_base_path }}/keys"

  tasks:
    # ===========================================
    # MANUAL DNS CHALLENGE CERTIFICATES
    # ===========================================
    # Since staging is on local network, we use manual DNS challenges
    
    - name: Generate certificates using manual DNS challenge
      block:
        - name: Generate certificate for primary domain
          command: >
            certbot certonly
            --manual
            --preferred-challenges=dns
            --email {{ letsencrypt_email }}
            --agree-tos
            --no-eff-email
            --manual-public-ip-logging-ok
            --cert-path {{ ssl_base_path }}/live
            --key-path {{ ssl_base_path }}/keys
            -d {{ domains | join(' -d ') }}
            --dry-run
          register: cert_generation
          failed_when: false
          
        - name: Display manual DNS challenge instructions
          debug:
            msg: |
              =====================================================
              MANUAL DNS CHALLENGE REQUIRED
              =====================================================
              
              The certificate generation requires manual DNS verification.
              You will need to add TXT records to your DNS provider.
              
              To generate certificates manually, run the following commands on the server:
              
              1. For the primary certificate (covering all domains):
                 sudo certbot certonly --manual --preferred-challenges=dns \
                   --email {{ letsencrypt_email }} --agree-tos --no-eff-email \
                   --manual-public-ip-logging-ok \
                   -d {{ domains | join(' -d ') }}
              
              2. Follow the prompts to add TXT records to your DNS
              
              3. After successful generation, run the copy-certs task:
                 ansible-playbook -i inventory/staging.yml ssl-setup.yml --tags copy-certs
              
              =====================================================
              DNS RECORDS TO ADD
              =====================================================
              {% for domain in domains %}
              Domain: {{ domain }}
              Type: TXT
              Name: _acme-challenge.{{ domain }}
              Value: [Will be provided by certbot during manual process]
              {% endfor %}
              =====================================================
      tags: ['generate-certs']

    # ===========================================
    # COPY CERTIFICATES TO STRUCTURED LOCATION
    # ===========================================
    
    - name: Copy certificates to structured SSL directory
      block:
        - name: Find Let's Encrypt certificates
          find:
            paths: /etc/letsencrypt/live
            file_type: directory
          register: cert_dirs
          
        - name: Copy certificates to /opt/ssl structure
          copy:
            src: "{{ item.path }}/"
            dest: "{{ ssl_base_path }}/{{ item.path | basename }}/"
            mode: preserve
            owner: root
            group: docker
            remote_src: yes
          loop: "{{ cert_dirs.files }}"
          when: cert_dirs.files | length > 0
          
        - name: Create symbolic links for easy access
          file:
            src: "{{ ssl_base_path }}/{{ domains[0] }}/{{ item.src }}"
            dest: "{{ ssl_base_path }}/{{ item.dest }}"
            state: link
            force: yes
          loop:
            - { src: "fullchain.pem", dest: "fullchain.pem" }
            - { src: "privkey.pem", dest: "privkey.pem" }
            - { src: "chain.pem", dest: "chain.pem" }
            - { src: "cert.pem", dest: "cert.pem" }
          when: cert_dirs.files | length > 0
      tags: ['copy-certs']

    # ===========================================
    # UPDATE CONTAINER CONFIGURATIONS
    # ===========================================
    
    - name: Update nginx configuration for SSL
      template:
        src: ../roles/shared-monitoring/templates/nginx-ssl.conf.j2
        dest: /opt/shared/nginx/config/ssl.conf
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      notify: reload nginx
      tags: ['update-config']
      
    - name: Create nginx SSL configuration template
      copy:
        dest: /opt/shared/nginx/config/ssl-params.conf
        content: |
          # SSL Configuration
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
          ssl_prefer_server_ciphers off;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 10m;
          ssl_session_tickets off;
          ssl_stapling on;
          ssl_stapling_verify on;
          
          # Security headers
          add_header Strict-Transport-Security "max-age=31536000; includeSubdomains" always;
          add_header X-Content-Type-Options nosniff always;
          add_header X-Frame-Options DENY always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      tags: ['update-config']

  post_tasks:
    - name: Set up certificate renewal
      cron:
        name: "Renew Let's Encrypt certificates"
        minute: "0"
        hour: "12"
        day: "*/7"
        job: "/usr/bin/certbot renew --quiet --post-hook 'docker restart nginx-proxy grafana prometheus'"
      tags: ['renewal']
      
    - name: Display SSL setup summary
      debug:
        msg: |
          ========================================
          SSL CERTIFICATE SETUP SUMMARY
          ========================================
          
          üîê Certificate Paths:
          - Certificate directory: {{ ssl_base_path }}
          - Full chain: {{ ssl_base_path }}/fullchain.pem
          - Private key: {{ ssl_base_path }}/privkey.pem
          
          üåê Domains covered:
          {% for domain in domains %}
          - {{ domain }}
          {% endfor %}
          
          üìã Next Steps:
          1. Add DNS TXT records as shown above
          2. Run certificate generation manually
          3. Update container configurations
          4. Restart services to use SSL
          
          üîÑ Renewal:
          - Automatic renewal configured via cron
          - Runs weekly on Sundays at 12:00
          ========================================

  handlers:
    - name: reload nginx
      community.docker.docker_container:
        name: nginx-proxy
        state: started
        restart: yes