---
# Deploy Beryl3 Django application from Docker registry
- name: Deploy Beryl3 Application
  hosts: staging-server
  become: true
  vars:
    app_name: "beryl3-webapp"
    app_domain: "beryl3-stage.mdubiel.org"
    app_port: "8000"
    registry_url: "192.168.1.14:5000"
    registry_namespace: "mdubiel.org"
    registry_image: "{{ registry_url }}/{{ registry_namespace }}/{{ app_name }}:latest"
    app_root: "/opt/beryl3"
    postgres_db: "beryl3"
    postgres_user: "beryl3_user"
    postgres_password: "{{ vault_postgres_password | default('beryl3_secure_pass') }}"
    
    # Resend configuration
    resend_api_key: "{{ vault_resend_api_key | default(lookup('env', 'RESEND_API_KEY')) | default('re_123456789_YourResendAPIKeyHere') }}"

  tasks:
    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "1000"
        group: "1000"
      loop:
        - "{{ app_root }}"
        - "{{ app_root }}/data"
        - "{{ app_root }}/logs"
        - "{{ app_root }}/media"
        - "{{ app_root }}/media/collections"
        - "{{ app_root }}/media/items"
        - "{{ app_root }}/static"

    - name: Generate application environment file
      template:
        src: beryl3.env.j2
        dest: "{{ app_root }}/.env"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: docker

    - name: Copy GCS credentials file
      copy:
        src: "{{ lookup('env', 'HOME') }}/projects/beryl3/gcs_keys/mateusz-344213-5c136b4db5c3.json"
        dest: "{{ app_root }}/gcs-credentials.json"
        mode: '0644'
        owner: "1000"
        group: "1000"

    - name: Create Docker network for projects
      community.docker.docker_network:
        name: projects
        state: present

    - name: Start PostgreSQL container for application
      community.docker.docker_container:
        name: beryl3-postgres
        image: postgres:15
        state: started
        restart_policy: unless-stopped
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: "{{ postgres_db }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        volumes:
          - "{{ app_root }}/data/postgres:/var/lib/postgresql/data"
        labels:
          prometheus.scrape: "true"
          service.name: "beryl3-postgres"
          service.component: "database"
        networks:
          - name: projects
          - name: monitoring

    - name: Wait for PostgreSQL to be ready
      wait_for:
        host: localhost
        port: 5432
        delay: 5
        timeout: 30

    - name: Create Docker configuration directory
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon for insecure registry
      copy:
        content: |
          {
            "insecure-registries": ["{{ registry_url }}"]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker

    - name: Flush handlers (restart Docker if needed)
      meta: flush_handlers

    - name: Login to Docker registry
      community.docker.docker_login:
        registry_url: "{{ registry_url }}"
        username: "registry"
        password: "registry123"

    - name: Pull latest application image
      community.docker.docker_image:
        name: "{{ registry_image }}"
        source: pull
        state: present
        force_source: true

    - name: Start Beryl3 application container
      community.docker.docker_container:
        name: beryl3-webapp
        image: "{{ registry_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ app_port }}:8000"
        env_file: "{{ app_root }}/.env"
        volumes:
          - "{{ app_root }}/media:/app/media"
          - "{{ app_root }}/logs:/app/logs"
          - "{{ app_root }}/gcs-credentials.json:/app/gcs-credentials.json:ro"
        labels:
          prometheus.scrape: "true"
          service.name: "beryl3-webapp"
          service.component: "web-application"
          traefik.enable: "true"
          traefik.http.routers.beryl3.rule: "Host(`{{ app_domain }}`)"
          traefik.http.routers.beryl3.entrypoints: "websecure"
          traefik.http.routers.beryl3.tls.certresolver: "letsencrypt"
          traefik.http.services.beryl3.loadbalancer.server.port: "8000"
        networks:
          - name: projects
          - name: monitoring

    - name: Generate nginx configuration for application
      template:
        src: beryl3-nginx-http.conf.j2
        dest: "{{ shared_data_path }}/nginx/config/beryl3.conf"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: docker
      notify: restart nginx-proxy

    - name: Verify application is running
      uri:
        url: "http://localhost:{{ app_port }}/"
        method: GET
        timeout: 30
      retries: 5
      delay: 10
      register: app_health_check

    - name: Display deployment information
      debug:
        msg: |
          ===== BERYL3 APPLICATION DEPLOYMENT SUCCESSFUL =====
          
          üöÄ Application Details:
          - Name: {{ app_name }}
          - Domain: {{ app_domain }}
          - Image: {{ registry_image }}
          - Port: {{ app_port }}
          
          üåê Access URLs:
          - Application: http://{{ app_domain }}/ (via nginx proxy)
          - Direct Access: http://{{ ansible_host }}:{{ app_port }}/
          - Admin: http://{{ app_domain }}/admin/
          
          üíæ Database:
          - PostgreSQL: beryl3-postgres (port 5432)
          - Database: {{ postgres_db }}
          - User: {{ postgres_user }}
          
          üìÅ Data Locations:
          - App Root: {{ app_root }}
          - Media Files: {{ app_root }}/media
          - Logs: {{ app_root }}/logs
          - Database Data: {{ app_root }}/data/postgres
          
          üîß Management Commands:
          - View logs: docker logs beryl3-webapp
          - Restart app: docker restart beryl3-webapp
          - Database shell: docker exec -it beryl3-postgres psql -U {{ postgres_user }} -d {{ postgres_db }}
          
          ===================================================

  handlers:
    - name: restart nginx-proxy
      community.docker.docker_container:
        name: nginx-proxy
        state: started
        restart: true

    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: true

  post_tasks:
    - name: Verify containers are running
      community.docker.docker_container_info:
        name: "{{ item }}"
      register: container_status
      loop:
        - beryl3-webapp
        - beryl3-postgres
      tags: ['verify']

    - name: Display container status
      debug:
        msg: "/{{ item.container.Name }} is {{ item.container.State.Status }}"
      loop: "{{ container_status.results }}"
      when: item.exists
      tags: ['verify']